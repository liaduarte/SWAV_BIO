# -*- coding: utf-8 -*-
"""
/***************************************************************************
 SWAV_BIO
                                 A QGIS plugin
 This plugin allows to obtain the biomass in rocky beach
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2020-09-23
        git sha              : $Format:%H$
        copyright            : (C) 2020 by Projeto SWAV
        email                : liaduarte@fc.up.pt
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
from qgis.PyQt.QtCore import QSettings, QTranslator, QCoreApplication, QFileInfo
from qgis.PyQt.QtGui import QIcon
from qgis.PyQt.QtWidgets import QAction, QMessageBox, QFileDialog, QProgressBar
from qgis.PyQt.QtCore import *
from qgis.PyQt.QtGui import *
from qgis.PyQt.QtWidgets import *
from qgis.core import *
from qgis.gui import *
import numpy

# Initialize Qt resources from file resources.py
from .resources import *
# Import the code for the dialog
from .swav_bio_dialog import SWUAV_BIODialog
from .swav_bio_dialog import RectangleMapTool
from .calculator import Ui_Dialog
import os.path
from processing.core.Processing import Processing



class SWAV_BIO:
    """QGIS Plugin Implementation."""

    def __init__(self, iface):
        """Constructor.

        :param iface: An interface instance that will be passed to this class
            which provides the hook by which you can manipulate the QGIS
            application at run time.
        :type iface: QgsInterface
        """
        # Save reference to the QGIS interface
        self.iface = iface
        # initialize plugin directory
        self.plugin_dir = os.path.dirname(__file__)
        # initialize locale
        locale = QSettings().value('locale/userLocale')[0:2]
        locale_path = os.path.join(
            self.plugin_dir,
            'i18n',
            'SWUAV_BIO_{}.qm'.format(locale))

        if os.path.exists(locale_path):
            self.translator = QTranslator()
            self.translator.load(locale_path)
            QCoreApplication.installTranslator(self.translator)

        # Declare instance attributes
        self.actions = []
        self.menu = self.tr(u'&SWUAV_BIO')

        # Check if plugin was started the first time in current QGIS session
        # Must be set in initGui() to survive plugin reloads
        self.first_start = None
        self.window = None

    # noinspection PyMethodMayBeStatic
    def tr(self, message):
        """Get the translation for a string using Qt translation API.

        We implement this ourselves since we do not inherit QObject.

        :param message: String for translation.
        :type message: str, QString

        :returns: Translated version of message.
        :rtype: QString
        """
        # noinspection PyTypeChecker,PyArgumentList,PyCallByClass
        return QCoreApplication.translate('SWUAV_BIO', message)


    def add_action(
        self,
        icon_path,
        text,
        callback,
        enabled_flag=True,
        add_to_menu=True,
        add_to_toolbar=True,
        status_tip=None,
        whats_this=None,
        parent=None):
        """Add a toolbar icon to the toolbar.

        :param icon_path: Path to the icon for this action. Can be a resource
            path (e.g. ':/plugins/foo/bar.png') or a normal file system path.
        :type icon_path: str

        :param text: Text that should be shown in menu items for this action.
        :type text: str

        :param callback: Function to be called when the action is triggered.
        :type callback: function

        :param enabled_flag: A flag indicating if the action should be enabled
            by default. Defaults to True.
        :type enabled_flag: bool

        :param add_to_menu: Flag indicating whether the action should also
            be added to the menu. Defaults to True.
        :type add_to_menu: bool

        :param add_to_toolbar: Flag indicating whether the action should also
            be added to the toolbar. Defaults to True.
        :type add_to_toolbar: bool

        :param status_tip: Optional text to show in a popup when mouse pointer
            hovers over the action.
        :type status_tip: str

        :param parent: Parent widget for the new action. Defaults None.
        :type parent: QWidget

        :param whats_this: Optional text to show in the status bar when the
            mouse pointer hovers over the action.

        :returns: The action that was created. Note that the action is also
            added to self.actions list.
        :rtype: QAction
        """

        icon = QIcon(icon_path)
        action = QAction(icon, text, parent)
        action.triggered.connect(callback)
        action.setEnabled(enabled_flag)

        if status_tip is not None:
            action.setStatusTip(status_tip)

        if whats_this is not None:
            action.setWhatsThis(whats_this)

        if add_to_toolbar:
            # Adds plugin icon to Plugins toolbar
            self.iface.addToolBarIcon(action)

        if add_to_menu:
            self.iface.addPluginToMenu(
                self.menu,
                action)

        self.actions.append(action)

        return action

    def initGui(self):
        """Create the menu entries and toolbar icons inside the QGIS GUI."""

        icon_path = ':/plugins/swav_bio/icon.png'
        self.add_action(
            icon_path,
            text=self.tr(u'SWUAV_BIO'),
            callback=self.run,
            parent=self.iface.mainWindow())

        # will be set False in run()
        self.first_start = True


    def unload(self):
        """Removes the plugin menu item and icon from QGIS GUI."""
        for action in self.actions:
            self.iface.removePluginMenu(
                self.tr(u'&SWUAV_BIO'),
                action)
            self.iface.removeToolBarIcon(action)


    def run(self):
        """Run method that performs all the real work"""

        # Create the dialog with elements (after translation) and keep reference
        # Only create GUI ONCE in callback, so that it will only load when the plugin is started
        if self.first_start == True:
            self.first_start = False
            self.dlg = SWUAV_BIODialog()
            self.dlg.comboBox.clear()
            self.dlg.comboBox_2.clear()
            self.dlg.comboBox.addItems(['Red Seaweed', 'Green Seaweed','Brown Seaweed'])
            self.dlg.comboBox.currentTextChanged.connect(self.field_select)
            self.dlg.comboBox_2.addItems(['Chondrus Cripus', 'Osmundea Pinnatifida'])
            self.dlg.pushButton.clicked.connect(self.fillClassified)
            self.dlg.pushButton_2.clicked.connect(self.fillNDVI)
            self.dlg.pushButton_4.clicked.connect(self.fillOutput)
            self.dlg.pushButton_6.clicked.connect(self.fillOutput_txt)
            self.dlg.pushButton_3.clicked.connect(self.fillmask)
            self.dlg.pushButton_7.clicked.connect(self.calculator)

            # show the dialog
            self.dlg.show()

            canvas = self.dlg.widget
            toolDraw = RectangleMapTool(canvas)
            # teste = self.foo(tool.rect_created)
            canvas.setMapTool(toolDraw)

            # QLineEdit
            line_bbox = QLineEdit()
            line_bbox.hide()

            # Run the dialog event loop
            result = self.dlg.exec_()

            # See if OK was pressed
            if result:
                output = self.dlg.lineEdit_4.text()
                output_txt = self.dlg.lineEdit_6.text()
                classified = self.dlg.lineEdit_2.text()
                ndvi_input = self.dlg.lineEdit.text()
                # if there is rectangle then use the rectangle
                if len(toolDraw.points) !=0:
                    poligono = QgsGeometry.fromPolygonXY([toolDraw.points])
                    vl = QgsVectorLayer("Polygon", "temp", "memory")
                    vl.setCrs(self.coord)
                    pr = vl.dataProvider()
                    f = QgsFeature()
                    f.setGeometry(poligono)
                    pr.addFeature(f)
                    vl.updateExtents()
                    QgsProject.instance().addMapLayer(vl)

                    Processing.initialize()

                    clip_ndvi = Processing.runAlgorithm("saga:cliprasterwithpolygon", {
                        'INPUT': str(self.dlg.lineEdit.text()),
                        'POLYGONS': vl,
                        'OUTPUT': QgsProcessing.TEMPORARY_OUTPUT})
                    out_ndvi = clip_ndvi['OUTPUT']

                    clip_classified = Processing.runAlgorithm("saga:cliprasterwithpolygon", {
                        'INPUT': str(self.dlg.lineEdit_2.text()),
                        'POLYGONS': vl,
                        'OUTPUT': QgsProcessing.TEMPORARY_OUTPUT})
                    out_classified = clip_classified['OUTPUT']

                    #Assign NDVI values to classified seaweed image
                    seaweed_ndvi = Processing.runAlgorithm("grass7:r.mapcalc.simple", {
                        'a': str(out_classified),
                        'b': str(out_ndvi),
                        'c': None, 'd': None, 'e': None, 'f': None, 'expression': '(A==1)*B',
                        'output': QgsProcessing.TEMPORARY_OUTPUT, 'GRASS_REGION_PARAMETER': None,
                        'GRASS_REGION_CELLSIZE_PARAMETER': 0, 'GRASS_RASTER_FORMAT_OPT': '',
                        'GRASS_RASTER_FORMAT_META': ''})
                    seaweed_ndvi_out = seaweed_ndvi['output']

                    raster_class = Processing.runAlgorithm("native:rasterlayeruniquevaluesreport", {
                        'INPUT': str(seaweed_ndvi_out),
                        'BAND': 1, 'OUTPUT_HTML_FILE': QgsProcessing.TEMPORARY_OUTPUT})
                    params = raster_class['OUTPUT_HTML_FILE']

                    if self.dlg.radioButton.isChecked():
                        self.new_equation = self.equation
                        bio = Processing.runAlgorithm("grass7:r.mapcalc.simple", {
                            'a': str(seaweed_ndvi_out),
                            'b': None, 'c': None, 'd': None, 'e': None, 'f': None,
                            'expression': str(self.new_equation),
                            'output': QgsProcessing.TEMPORARY_OUTPUT,
                            'GRASS_REGION_PARAMETER': None, 'GRASS_REGION_CELLSIZE_PARAMETER': 0,
                            'GRASS_RASTER_FORMAT_OPT': '',
                            'GRASS_RASTER_FORMAT_META': ''})
                        biom_area = bio['output']

                    if self.dlg.radioButton_2.isChecked():
                            if self.dlg.comboBox.currentText() == 'Red Seaweed' and self.dlg.comboBox_2.currentText() == 'Chondrus Cripus':
                                bio = Processing.runAlgorithm("grass7:r.mapcalc.simple", {
                                    'a': str(seaweed_ndvi_out),
                                    'b': None, 'c': None, 'd': None, 'e': None, 'f': None,
                                    'expression': '2.718281828459^((A+0.5262)/0.1829)',
                                    'output': QgsProcessing.TEMPORARY_OUTPUT,
                                    'GRASS_REGION_PARAMETER': None, 'GRASS_REGION_CELLSIZE_PARAMETER': 0,
                                    'GRASS_RASTER_FORMAT_OPT': '',
                                    'GRASS_RASTER_FORMAT_META': ''})
                                biom_area = bio['output']
                            if self.dlg.comboBox.currentText() == 'Red Seaweed' and self.dlg.comboBox_2.currentText() == 'Osmundea Pinnatifida':
                                bio = Processing.runAlgorithm("grass7:r.mapcalc.simple", {
                                    'a': str(seaweed_ndvi_out),
                                    'b': None, 'c': None, 'd': None, 'e': None, 'f': None,
                                    'expression': '2.718281828459^((A+0.3823)/0.158)',
                                    'output': QgsProcessing.TEMPORARY_OUTPUT,
                                    'GRASS_REGION_PARAMETER': None, 'GRASS_REGION_CELLSIZE_PARAMETER': 0,
                                    'GRASS_RASTER_FORMAT_OPT': '',
                                    'GRASS_RASTER_FORMAT_META': ''})
                                biom_area = bio['output']
                            if self.dlg.comboBox.currentText() == 'Green Seaweed' and self.dlg.comboBox_2.currentText() == 'Codium spp.':
                                bio = Processing.runAlgorithm("grass7:r.mapcalc.simple", {
                                    'a': str(seaweed_ndvi_out),
                                    'b': None, 'c': None, 'd': None, 'e': None, 'f': None,
                                    'expression': '2.718281828459^((A+0.4617)/0.1541)',
                                    'output': QgsProcessing.TEMPORARY_OUTPUT,
                                    'GRASS_REGION_PARAMETER': None, 'GRASS_REGION_CELLSIZE_PARAMETER': 0,
                                    'GRASS_RASTER_FORMAT_OPT': '',
                                    'GRASS_RASTER_FORMAT_META': ''})
                                biom_area = bio['output']
                            if self.dlg.comboBox.currentText() == 'Green Seaweed' and self.dlg.comboBox_2.currentText() == 'Ulva spp.':
                                bio = Processing.runAlgorithm("grass7:r.mapcalc.simple", {
                                    'a': str(seaweed_ndvi_out),
                                    'b': None, 'c': None, 'd': None, 'e': None, 'f': None,
                                    'expression': '2.718281828459^((A+0.3633)/0.1622)',
                                    'output': QgsProcessing.TEMPORARY_OUTPUT,
                                    'GRASS_REGION_PARAMETER': None, 'GRASS_REGION_CELLSIZE_PARAMETER': 0,
                                    'GRASS_RASTER_FORMAT_OPT': '',
                                    'GRASS_RASTER_FORMAT_META': ''})
                                biom_area = bio['output']
                            if self.dlg.comboBox.currentText() == 'Brown Seaweed' and self.dlg.comboBox_2.currentText() == 'Fucus spp.':
                                bio = Processing.runAlgorithm("grass7:r.mapcalc.simple", {
                                    'a': str(seaweed_ndvi_out),
                                    'b': None, 'c': None, 'd': None, 'e': None, 'f': None,
                                    'expression': '2.718281828459^((A+0.6286)/0.1815)',
                                    'output': QgsProcessing.TEMPORARY_OUTPUT,
                                    'GRASS_REGION_PARAMETER': None, 'GRASS_REGION_CELLSIZE_PARAMETER': 0,
                                    'GRASS_RASTER_FORMAT_OPT': '',
                                    'GRASS_RASTER_FORMAT_META': ''})
                                biom_area = bio['output']
                            if self.dlg.comboBox.currentText() == 'Brown Seaweed' and self.dlg.comboBox_2.currentText() == 'Laminaria Ochroleuca':
                                bio = Processing.runAlgorithm("grass7:r.mapcalc.simple", {
                                    'a': str(seaweed_ndvi_out),
                                    'b': None, 'c': None, 'd': None, 'e': None, 'f': None,
                                    'expression': '2.718281828459^((A+0.4722)/0.1786)',
                                    'output': QgsProcessing.TEMPORARY_OUTPUT,
                                    'GRASS_REGION_PARAMETER': None, 'GRASS_REGION_CELLSIZE_PARAMETER': 0,
                                    'GRASS_RASTER_FORMAT_OPT': '',
                                    'GRASS_RASTER_FORMAT_META': ''})
                                biom_area = bio['output']

                # if there is rectangle, then use all image
                if len(toolDraw.points) ==0:
                    if str(self.dlg.lineEdit_3.text())==None:
                        #QMessageBox.about(self.dlg, "teste", str('None'))
                        # Do something useful here - delete the line containing pass and
                        # substitute with your code.
                        # Assign NDVI values to classified seaweed image
                        seaweed_ndvi = Processing.runAlgorithm("grass7:r.mapcalc.simple", {
                                'a': str(classified),
                                'b': str(ndvi_input),
                                'c': None, 'd': None, 'e': None, 'f': None, 'expression': '(A==1)*B',
                                'output': QgsProcessing.TEMPORARY_OUTPUT, 'GRASS_REGION_PARAMETER': None,
                                'GRASS_REGION_CELLSIZE_PARAMETER': 0, 'GRASS_RASTER_FORMAT_OPT': '',
                                'GRASS_RASTER_FORMAT_META': ''})
                        seaweed_ndvi_out = seaweed_ndvi['output']

                        raster_class = Processing.runAlgorithm("native:rasterlayeruniquevaluesreport", {
                            'INPUT': str(seaweed_ndvi_out),
                            'BAND': 1, 'OUTPUT_HTML_FILE': QgsProcessing.TEMPORARY_OUTPUT})
                        params = raster_class['OUTPUT_HTML_FILE']

                        if self.dlg.radioButton.isChecked():
                                self.new_equation = self.equation
                                bio = Processing.runAlgorithm("grass7:r.mapcalc.simple", {
                                    'a': str(seaweed_ndvi_out),
                                    'b': None, 'c': None, 'd': None, 'e': None, 'f': None,
                                    'expression': str(self.new_equation),
                                    'output': QgsProcessing.TEMPORARY_OUTPUT,
                                    'GRASS_REGION_PARAMETER': None, 'GRASS_REGION_CELLSIZE_PARAMETER': 0,
                                    'GRASS_RASTER_FORMAT_OPT': '',
                                    'GRASS_RASTER_FORMAT_META': ''})
                                biom_area = bio['output']

                        if self.dlg.radioButton_2.isChecked():
                            # QMessageBox.about(self.dlg, "teste", str(params))
                            if self.dlg.comboBox.currentText() == 'Red Seaweed' and self.dlg.comboBox_2.currentText() == 'Chondrus Cripus':
                                bio = Processing.runAlgorithm("grass7:r.mapcalc.simple", {
                                    'a': str(seaweed_ndvi_out),
                                    'b': None, 'c': None, 'd': None, 'e': None, 'f': None,
                                    'expression': '2.718281828459^((A+0.5262)/0.1829)',
                                    'output': QgsProcessing.TEMPORARY_OUTPUT,
                                    'GRASS_REGION_PARAMETER': None, 'GRASS_REGION_CELLSIZE_PARAMETER': 0,
                                    'GRASS_RASTER_FORMAT_OPT': '',
                                    'GRASS_RASTER_FORMAT_META': ''})
                                biom_area = bio['output']
                            if self.dlg.comboBox.currentText() == 'Red Seaweed' and self.dlg.comboBox_2.currentText() == 'Osmundea Pinnatifida':
                                bio = Processing.runAlgorithm("grass7:r.mapcalc.simple", {
                                    'a': str(seaweed_ndvi_out),
                                    'b': None, 'c': None, 'd': None, 'e': None, 'f': None,
                                    'expression': '2.718281828459^((A+0.3823)/0.158)',
                                    'output': QgsProcessing.TEMPORARY_OUTPUT,
                                    'GRASS_REGION_PARAMETER': None, 'GRASS_REGION_CELLSIZE_PARAMETER': 0,
                                    'GRASS_RASTER_FORMAT_OPT': '',
                                    'GRASS_RASTER_FORMAT_META': ''})
                                biom_area = bio['output']
                            if self.dlg.comboBox.currentText() == 'Green Seaweed' and self.dlg.comboBox_2.currentText() == 'Codium spp.':
                                bio = Processing.runAlgorithm("grass7:r.mapcalc.simple", {
                                    'a': str(seaweed_ndvi_out),
                                    'b': None, 'c': None, 'd': None, 'e': None, 'f': None,
                                    'expression': '2.718281828459^((A+0.4617)/0.1541)',
                                    'output': QgsProcessing.TEMPORARY_OUTPUT,
                                    'GRASS_REGION_PARAMETER': None, 'GRASS_REGION_CELLSIZE_PARAMETER': 0,
                                    'GRASS_RASTER_FORMAT_OPT': '',
                                    'GRASS_RASTER_FORMAT_META': ''})
                                biom_area = bio['output']
                            if self.dlg.comboBox.currentText() == 'Green Seaweed' and self.dlg.comboBox_2.currentText() == 'Ulva spp.':
                                bio = Processing.runAlgorithm("grass7:r.mapcalc.simple", {
                                    'a': str(seaweed_ndvi_out),
                                    'b': None, 'c': None, 'd': None, 'e': None, 'f': None,
                                    'expression': '2.718281828459^((A+0.3633)/0.1622)',
                                    'output': QgsProcessing.TEMPORARY_OUTPUT,
                                    'GRASS_REGION_PARAMETER': None, 'GRASS_REGION_CELLSIZE_PARAMETER': 0,
                                    'GRASS_RASTER_FORMAT_OPT': '',
                                    'GRASS_RASTER_FORMAT_META': ''})
                                biom_area = bio['output']
                            if self.dlg.comboBox.currentText() == 'Brown Seaweed' and self.dlg.comboBox_2.currentText() == 'Fucus spp.':
                                bio = Processing.runAlgorithm("grass7:r.mapcalc.simple", {
                                    'a': str(seaweed_ndvi_out),
                                    'b': None, 'c': None, 'd': None, 'e': None, 'f': None,
                                    'output': QgsProcessing.TEMPORARY_OUTPUT,
                                    'GRASS_REGION_PARAMETER': None, 'GRASS_REGION_CELLSIZE_PARAMETER': 0,
                                    'GRASS_RASTER_FORMAT_OPT': '',
                                    'GRASS_RASTER_FORMAT_META': ''})
                                biom_area = bio['output']
                            if self.dlg.comboBox.currentText() == 'Brown Seaweed' and self.dlg.comboBox_2.currentText() == 'Laminaria Ochroleuca':
                                bio = Processing.runAlgorithm("grass7:r.mapcalc.simple", {
                                    'a': str(seaweed_ndvi_out),
                                    'b': None, 'c': None, 'd': None, 'e': None, 'f': None,
                                    'expression': '2.718281828459^((A+0.4722)/0.1786)',
                                    'output': QgsProcessing.TEMPORARY_OUTPUT,
                                    'GRASS_REGION_PARAMETER': None, 'GRASS_REGION_CELLSIZE_PARAMETER': 0,
                                    'GRASS_RASTER_FORMAT_OPT': '',
                                    'GRASS_RASTER_FORMAT_META': ''})
                                biom_area = bio['output']

                    #there is a shapefile with polygons
                    if str(self.dlg.lineEdit_3.text())!=None:

                        study_zone = str(self.dlg.lineEdit_3.text())
                        vl = QgsVectorLayer(study_zone,'study zone' , "ogr")
                        vl.setCrs(self.coord)

                        Processing.initialize()

                        clip_ndvi = Processing.runAlgorithm("saga:cliprasterwithpolygon", {
                            'INPUT': str(self.dlg.lineEdit.text()),
                            'POLYGONS': vl,
                            'OUTPUT': QgsProcessing.TEMPORARY_OUTPUT})
                        out_ndvi = clip_ndvi['OUTPUT']

                        clip_classified = Processing.runAlgorithm("saga:cliprasterwithpolygon", {
                            'INPUT': str(self.dlg.lineEdit_2.text()),
                            'POLYGONS': vl,
                            'OUTPUT': QgsProcessing.TEMPORARY_OUTPUT})
                        out_classified = clip_classified['OUTPUT']

                        # Assign NDVI values to classified seaweed image
                        seaweed_ndvi = Processing.runAlgorithm("grass7:r.mapcalc.simple", {
                            'a': str(out_classified),
                            'b': str(out_ndvi),
                            'c': None, 'd': None, 'e': None, 'f': None, 'expression': '(A==1)*B',
                            'output': QgsProcessing.TEMPORARY_OUTPUT, 'GRASS_REGION_PARAMETER': None,
                            'GRASS_REGION_CELLSIZE_PARAMETER': 0, 'GRASS_RASTER_FORMAT_OPT': '',
                            'GRASS_RASTER_FORMAT_META': ''})
                        seaweed_ndvi_out = seaweed_ndvi['output']

                        raster_class = Processing.runAlgorithm("native:rasterlayeruniquevaluesreport", {
                            'INPUT': str(seaweed_ndvi_out),
                            'BAND': 1, 'OUTPUT_HTML_FILE': QgsProcessing.TEMPORARY_OUTPUT})
                        params = raster_class['OUTPUT_HTML_FILE']

                        if self.dlg.radioButton.isChecked():
                            self.new_equation = self.equation
                            bio = Processing.runAlgorithm("grass7:r.mapcalc.simple", {
                                'a': str(seaweed_ndvi_out),
                                'b': None, 'c': None, 'd': None, 'e': None, 'f': None,
                                'expression': str(self.new_equation),
                                'output': QgsProcessing.TEMPORARY_OUTPUT,
                                'GRASS_REGION_PARAMETER': None, 'GRASS_REGION_CELLSIZE_PARAMETER': 0,
                                'GRASS_RASTER_FORMAT_OPT': '',
                                'GRASS_RASTER_FORMAT_META': ''})
                            biom_area = bio['output']

                        if self.dlg.radioButton_2.isChecked():
                            if self.dlg.comboBox.currentText() == 'Red Seaweed' and self.dlg.comboBox_2.currentText() == 'Chondrus Cripus':
                                bio = Processing.runAlgorithm("grass7:r.mapcalc.simple", {
                                    'a': str(seaweed_ndvi_out),
                                    'b': None, 'c': None, 'd': None, 'e': None, 'f': None,
                                    'expression': '2.718281828459^((A+0.5262)/0.1829)',
                                    'output': QgsProcessing.TEMPORARY_OUTPUT,
                                    'GRASS_REGION_PARAMETER': None, 'GRASS_REGION_CELLSIZE_PARAMETER': 0,
                                    'GRASS_RASTER_FORMAT_OPT': '',
                                    'GRASS_RASTER_FORMAT_META': ''})
                                biom_area = bio['output']
                            if self.dlg.comboBox.currentText() == 'Red Seaweed' and self.dlg.comboBox_2.currentText() == 'Osmundea Pinnatifida':
                                bio = Processing.runAlgorithm("grass7:r.mapcalc.simple", {
                                    'a': str(seaweed_ndvi_out),
                                    'b': None, 'c': None, 'd': None, 'e': None, 'f': None,
                                    'expression': '2.718281828459^((A+0.3823)/0.158)',
                                    'output': QgsProcessing.TEMPORARY_OUTPUT,
                                    'GRASS_REGION_PARAMETER': None, 'GRASS_REGION_CELLSIZE_PARAMETER': 0,
                                    'GRASS_RASTER_FORMAT_OPT': '',
                                    'GRASS_RASTER_FORMAT_META': ''})
                                biom_area = bio['output']
                            if self.dlg.comboBox.currentText() == 'Green Seaweed' and self.dlg.comboBox_2.currentText() == 'Codium spp.':
                                bio = Processing.runAlgorithm("grass7:r.mapcalc.simple", {
                                    'a': str(seaweed_ndvi_out),
                                    'b': None, 'c': None, 'd': None, 'e': None, 'f': None,
                                    'expression': '2.718281828459^((A+0.4617)/0.1541)',
                                    'output': QgsProcessing.TEMPORARY_OUTPUT,
                                    'GRASS_REGION_PARAMETER': None, 'GRASS_REGION_CELLSIZE_PARAMETER': 0,
                                    'GRASS_RASTER_FORMAT_OPT': '',
                                    'GRASS_RASTER_FORMAT_META': ''})
                                biom_area = bio['output']
                            if self.dlg.comboBox.currentText() == 'Green Seaweed' and self.dlg.comboBox_2.currentText() == 'Ulva spp.':
                                bio = Processing.runAlgorithm("grass7:r.mapcalc.simple", {
                                    'a': str(seaweed_ndvi_out),
                                    'b': None, 'c': None, 'd': None, 'e': None, 'f': None,
                                    'expression': '2.718281828459^((A+0.3633)/0.1622)',
                                    'output': QgsProcessing.TEMPORARY_OUTPUT,
                                    'GRASS_REGION_PARAMETER': None, 'GRASS_REGION_CELLSIZE_PARAMETER': 0,
                                    'GRASS_RASTER_FORMAT_OPT': '',
                                    'GRASS_RASTER_FORMAT_META': ''})
                                biom_area = bio['output']
                            if self.dlg.comboBox.currentText() == 'Brown Seaweed' and self.dlg.comboBox_2.currentText() == 'Fucus spp.':
                                bio = Processing.runAlgorithm("grass7:r.mapcalc.simple", {
                                    'a': str(seaweed_ndvi_out),
                                    'b': None, 'c': None, 'd': None, 'e': None, 'f': None,
                                    'output': QgsProcessing.TEMPORARY_OUTPUT,
                                    'GRASS_REGION_PARAMETER': None, 'GRASS_REGION_CELLSIZE_PARAMETER': 0,
                                    'GRASS_RASTER_FORMAT_OPT': '',
                                    'GRASS_RASTER_FORMAT_META': ''})
                                biom_area = bio['output']
                            if self.dlg.comboBox.currentText() == 'Brown Seaweed' and self.dlg.comboBox_2.currentText() == 'Laminaria Ochroleuca':
                                bio = Processing.runAlgorithm("grass7:r.mapcalc.simple", {
                                    'a': str(seaweed_ndvi_out),
                                    'b': None, 'c': None, 'd': None, 'e': None, 'f': None,
                                    'expression': '2.718281828459^((A+0.4722)/0.1786)',
                                    'output': QgsProcessing.TEMPORARY_OUTPUT,
                                    'GRASS_REGION_PARAMETER': None, 'GRASS_REGION_CELLSIZE_PARAMETER': 0,
                                    'GRASS_RASTER_FORMAT_OPT': '',
                                    'GRASS_RASTER_FORMAT_META': ''})
                                biom_area = bio['output']

                file_info_norm = QFileInfo(str(biom_area))
                rlayer_new_norm = QgsRasterLayer(biom_area, file_info_norm.fileName(), 'gdal')
                data_mdt = rlayer_new_norm.dataProvider()
                extent_raster = data_mdt.extent()
                xmin_raster = extent_raster.xMinimum()
                xmax_raster = extent_raster.xMaximum()
                ymin_raster = extent_raster.yMinimum()
                ymax_raster = extent_raster.yMaximum()
                extent_raster_str = str(xmin_raster) + "," + str(xmax_raster) + "," + str(ymin_raster) + "," + str(
                    ymax_raster)
                cellSize = rlayer_new_norm.rasterUnitsPerPixelX()

                # estimate total biomass
                total_biom = Processing.runAlgorithm("grass7:r.mapcalc.simple",
                               {'a': biom_area,
                                'b': None, 'c': None, 'd': None, 'e': None, 'f': None, 'expression': 'A*'+str(cellSize)+'*'+str(cellSize),
                                'output': output, 'GRASS_REGION_PARAMETER': None,
                                'GRASS_REGION_CELLSIZE_PARAMETER': 0, 'GRASS_RASTER_FORMAT_OPT': '',
                                'GRASS_RASTER_FORMAT_META': ''})

                html_file = Processing.runAlgorithm("native:rasterlayerstatistics", {
                    'INPUT': str(output),
                    'BAND': 1, 'OUTPUT_HTML_FILE': str(output_txt)})

                QgsProject.instance().addMapLayer(rlayer_new_norm)
                self.dlg.widget.setExtent(rlayer_new_norm.extent())
                # set the map canvas layer set
                self.dlg.widget.setLayers([rlayer_new_norm])

    def field_select(self):
        # font
        font = QFont('Times', 8, italic=True)

        # getting the line edit of combo box
        self.dlg.comboBox_2.setEditable(True)
        line_edit = self.dlg.comboBox_2.lineEdit()

        # setting line font to the line edit
        line_edit.setFont(font)

        self.dlg.comboBox_2.clear()
        if self.dlg.comboBox.currentText() == 'Red Seaweed':
            self.dlg.comboBox_2.addItems(['Chondrus Cripus', 'Osmundea Pinnatifida'])
        if self.dlg.comboBox.currentText() == 'Green Seaweed':
            self.dlg.comboBox_2.addItems(['Codium spp.', 'Ulva spp.'])
        if self.dlg.comboBox.currentText() == 'Brown Seaweed':
            self.dlg.comboBox_2.addItems(['Fucus spp.', 'Laminaria Ochroleuca'])

    def fillClassified(self):
        self.dlg.lineEdit_2.setText(QFileDialog.getOpenFileName()[0])

        fileCI = str(self.dlg.lineEdit_2.text())

        fileInfo = QFileInfo(fileCI)
        path = fileInfo.filePath()
        basename = fileInfo.baseName()

        # add the raster
        vlayer = QgsRasterLayer(path, basename)
        lay_crs = vlayer.crs()

        # add layer to the registry
        QgsProject.instance().addMapLayer(vlayer)

        # set extent to the extent of our layer
        self.dlg.widget.setExtent(vlayer.extent())

        # set the map canvas layer set
        self.dlg.widget.setLayers([vlayer])

        #add raster values to the combobox to choose
        data_raster = vlayer.dataProvider()
        stats_raster = data_raster.bandStatistics(1, QgsRasterBandStats.All)
        lista_values_class = numpy.arange(float(stats_raster.minimumValue), float(stats_raster.maximumValue)+1.0, 1)
        stringList = [str(x) for x in lista_values_class]
        self.dlg.comboBox_3.addItems(stringList)

    def fillNDVI(self):
        self.dlg.lineEdit.setText(QFileDialog.getOpenFileName()[0])

        fileCI = str(self.dlg.lineEdit.text())

        fileInfo = QFileInfo(fileCI)
        path = fileInfo.filePath()
        basename = fileInfo.baseName()

        # add the raster
        vlayer = QgsRasterLayer(path, basename)

        # add the raster
        self.coord_syst = vlayer.crs()
        self.coord = self.crs(self.coord_syst)

        # add layer to the registry
        QgsProject.instance().addMapLayer(vlayer)

        # set extent to the extent of our layer
        self.dlg.widget.setExtent(vlayer.extent())

        # set the map canvas layer set
        self.dlg.widget.setLayers([vlayer])

    def fillOutput(self):
        filename, filter_string = QFileDialog.getSaveFileName(self.dlg, "Select output file ", "", '*.tif')
        self.dlg.lineEdit_4.setText(filename)

    def fillOutput_txt(self):
        filename, filter_string = QFileDialog.getSaveFileName(self.dlg, "Select output file ", "", '*.html')
        self.dlg.lineEdit_6.setText(filename)

    def fillmask(self):
        filename, filter_string = QFileDialog.getOpenFileName(self.dlg, "Select shapefile ", "", '*.shp')
        self.dlg.lineEdit_3.setText(str(filename))
        fileCI = str(self.dlg.lineEdit_3.text())
        fileInfo = QFileInfo(fileCI)
        path = fileInfo.filePath()
        basename = fileInfo.baseName()


    def crs(self, crs):
        return crs

    # Function
    def bbox(self):
        r = tool.rectangle()
        line_bbox.setText(str(r.xMinimum()))
        line_bbox.show()

    def foo(self,rect):
        print(rect)

    def calculator(self):
        if self.window is None:
            self.window = Window()
        self.window.show()
        self.window.pushButton_6.clicked.connect(self.add_plus)
        self.window.pushButton_2.clicked.connect(self.add_minus)
        self.window.pushButton_4.clicked.connect(self.add_times)
        self.window.pushButton_15.clicked.connect(self.add_divide)
        self.window.pushButton_11.clicked.connect(self.add_elev)
        self.window.pushButton_10.clicked.connect(self.add_sqrt)
        self.window.pushButton_14.clicked.connect(self.add_cos)
        self.window.pushButton_3.clicked.connect(self.add_sin)
        self.window.pushButton_9.clicked.connect(self.add_tan)
        self.window.pushButton_5.clicked.connect(self.add_log10)
        self.window.pushButton_8.clicked.connect(self.add_ln)
        self.window.pushButton_12.clicked.connect(self.add_bracketsleft)
        self.window.pushButton_13.clicked.connect(self.add_bracketsright)
        self.window.pushButton_7.clicked.connect(self.add_abs)
        self.window.pushButton_17.clicked.connect(self.final_equation)

    def add_plus(self):
        text = self.window.lineEdit_2.text()
        if text!=None:
            self.window.lineEdit_2.setText(str(text)+'+')

    def add_minus(self):
        text = self.window.lineEdit_2.text()
        if text != None:
            self.window.lineEdit_2.setText(str(text)+'-')

    def add_times(self):
        text = self.window.lineEdit_2.text()
        if text != None:
            self.window.lineEdit_2.setText(str(text)+'*')

    def add_divide(self):
        text = self.window.lineEdit_2.text()
        if text != None:
            self.window.lineEdit_2.setText(str(text)+'/')

    def add_elev(self):
        text = self.window.lineEdit_2.text()
        if text != None:
            self.window.lineEdit_2.setText(str(text)+'^')

    def add_sqrt(self):
        text = self.window.lineEdit_2.text()
        if text != None:
            self.window.lineEdit_2.setText(str(text)+'sqrt')

    def add_cos(self):
        text = self.window.lineEdit_2.text()
        if text != None:
            self.window.lineEdit_2.setText(str(text)+'cos')

    def add_sin(self):
        text = self.window.lineEdit_2.text()
        if text != None:
            self.window.lineEdit_2.setText(str(text)+'sin')

    def add_tan(self):
        text = self.window.lineEdit_2.text()
        if text != None:
            self.window.lineEdit_2.setText(str(text)+'tan')

    def add_log10(self):
        text = self.window.lineEdit_2.text()
        if text != None:
            self.window.lineEdit_2.setText(str(text)+'log10')

    def add_ln(self):
        text = self.window.lineEdit_2.text()
        if text != None:
            self.window.lineEdit_2.setText(str(text)+'ln')

    def add_bracketsleft(self):
        text = self.window.lineEdit_2.text()
        if text != None:
            self.window.lineEdit_2.setText(str(text)+'(')

    def add_bracketsright(self):
        text = self.window.lineEdit_2.text()
        if text != None:
            self.window.lineEdit_2.setText(str(text)+')')

    def add_abs(self):
        text = self.window.lineEdit_2.text()
        if text != None:
            self.window.lineEdit_2.setText(str(text)+'abs')

    def final_equation(self):
        self.equation = self.window.lineEdit_2.text()
        if "A" not in str(self.equation):
            QMessageBox.information(None, "Attention!", str("The equation is not considering the NDVI map."))
        self.dlg.lineEdit_5.setText(str(self.equation))
        self.window.close()


class Window(QWidget, Ui_Dialog):
    def __init__(self, parent=None):
        QWidget.__init__(self, parent)
        self.setupUi(self)